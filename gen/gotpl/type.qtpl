{% import (
	"strings"
	"strconv"

	"github.com/chromedp/cdproto-gen/gen/genutil"
	"github.com/chromedp/cdproto-gen/pdl"
) %}

// TypeTemplate is a template for a pdl type.
{% func TypeTemplate(t *pdl.Type, prefix, suffix string, d *pdl.Domain, domains []*pdl.Domain, v interface{}, noExposeOverride, omitOnlyWhenOptional bool) %}{% code
	typ := prefix + CamelName(t) + suffix

	var extra []*pdl.Type
	switch x := v.(type) {
	case []*pdl.Type:
		extra = x
	}

	docRefLink := DocRefLink(t)
%}
{%s= genutil.FormatComment(t.Description, "", typ + " ") %}{% if t.RawType != "command" && t.RawType != "returns" && docRefLink != "" %}
//
// See: {%s= docRefLink %}{% endif %}
type {%s= typ %} {%s= GoTypeDef(t, d, domains, extra, noExposeOverride, omitOnlyWhenOptional) %}
{% if t.Parameters == nil && t.Type != pdl.TypeArray && t.Type != pdl.TypeObject && t.Type != pdl.TypeAny %}{%code
	gz := GoEnumType(t.Type)
	z := gz
	if strings.Contains(z, ".") {
		z = z[strings.Index(z, ".")+1:]
	}
	z = strings.ToUpper(z[:1])+z[1:]
%}
// {%s= z %} returns the {%s= typ %} as {%s= gz %} value.
func (t {%s= typ %}) {%s= z %}() {%s= gz %} {
	return {%s= gz %}(t)
}
{% endif %}
{% if ev := t.Enum; ev != nil %}{%code
	gz := GoEnumType(t.Type)
	z := gz
	if strings.Contains(z, ".") {
		z = z[strings.Index(z, ".")+1:]
	}
	z = strings.ToUpper(z[:1])+z[1:]
%}// {%s= typ %} values.
const ({% for i, e := range ev %}{% code
	n := EnumValueName(t, e)
	val := `"` + e + `"`
	if t.Type == pdl.TypeInteger && t.EnumBitMask {
		val = strconv.Itoa(1<<uint(i-1))
	} else if t.Type == pdl.TypeInteger {
		val = strconv.Itoa(i+1)
	}
%}
	{%s= n %} {%s= typ %} = {%s= val %}{% endfor %}
)
{% if t.Type != pdl.TypeString %}
// String returns the {%s= typ %} as string value.
func (t {%s= typ %}) String() string {
	switch t {{% for _, e := range t.Enum %}
	case {%s= EnumValueName(t, e) %}:
		return {%q= e %}{% endfor %}
	}

	return fmt.Sprintf("{%s= typ %}(%d)", t)
}
{% endif %}

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t {%s= typ %}) MarshalEasyJSON(out *jwriter.Writer) {
	out.{%s= z %}({%s= gz %}(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t {%s= typ %}) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *{%s= typ %}) UnmarshalEasyJSON(in *jlexer.Lexer) {
	v := in.{%s= z %}()
	switch {%s= typ %}(v) {{% for _, e := range t.Enum %}{% code
		n := EnumValueName(t, e)
%}
	case {%s= n %}:
		*t = {%s= n %}{% endfor %}

	default:
		in.AddError(fmt.Errorf("unknown {%s= typ %} value: %v", v))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *{%s= typ %}) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}{% endif %}
{% if t.Extra != "" %}
{%s= t.Extra %}{% endif %}
{% endfunc %}
